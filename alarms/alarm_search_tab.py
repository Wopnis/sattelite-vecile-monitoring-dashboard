from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton,
    QListWidget, QListWidgetItem, QMessageBox, QDialog, QTextEdit, QDialogButtonBox
)
from PyQt5.QtGui import QColor, QFont
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication


class AlarmSearchTab(QWidget):
    def __init__(self, alarm_manager):
        super().__init__()
        self.alarm_manager = alarm_manager

        layout = QVBoxLayout()

        # üîπ –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
        form_layout = QHBoxLayout()
        self.vin_input = QLineEdit()
        self.contract_input = QLineEdit()
        self.keyword_input = QLineEdit()

        self.vin_input.returnPressed.connect(self.perform_search)
        self.contract_input.returnPressed.connect(self.perform_search)
        self.keyword_input.returnPressed.connect(self.perform_search)

        form_layout.addWidget(QLabel("VIN:"))
        form_layout.addWidget(self.vin_input)
        form_layout.addWidget(QLabel("–î–æ–≥–æ–≤–æ—Ä:"))
        form_layout.addWidget(self.contract_input)
        form_layout.addWidget(QLabel("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:"))
        form_layout.addWidget(self.keyword_input)

        self.search_button = QPushButton("–ò—Å–∫–∞—Ç—å")
        self.search_button.setDefault(True)
        self.search_button.clicked.connect(self.perform_search)
        form_layout.addWidget(self.search_button)

        self.clear_button = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫")
        self.clear_button.clicked.connect(self.clear_search)
        form_layout.addWidget(self.clear_button)

        layout.addLayout(form_layout)

        # üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        self.result_list = QListWidget()
        self.result_list.itemClicked.connect(self.highlight_item)
        self.result_list.itemPressed.connect(self.handle_right_click)
        self.result_list.itemDoubleClicked.connect(self.show_details_dialog)  # ‚úÖ –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫
        layout.addWidget(self.result_list)

        self.setLayout(layout)

    def perform_search(self):
        vin = self.vin_input.text().strip().lower()
        contract = self.contract_input.text().strip().lower()
        keyword = self.keyword_input.text().strip().lower()

        if not vin and not contract and not keyword:
            QMessageBox.warning(self, "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å", "–í–≤–µ–¥–∏—Ç–µ VIN, –¥–æ–≥–æ–≤–æ—Ä –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        results = []
        for i, alarm in enumerate(self.alarm_manager.alarms):
            match = True
            if vin and vin not in alarm.get("vin", "").lower():
                match = False
            if contract and contract not in alarm.get("contract", "").lower():
                match = False
            if keyword:
                combined = " ".join([
                    alarm.get("message", ""), alarm.get("comment", ""),
                    alarm.get("brand", ""), alarm.get("license", ""), alarm.get("lessee", "")
                ]).lower()
                if keyword not in combined:
                    match = False
            if match:
                results.append((i, alarm))

        self.result_list.clear()
        if not results:
            QMessageBox.information(self, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        for index, alarm in results:
            item_text = f"{alarm.get('vin')} | {alarm.get('contract')} | {alarm.get('brand')}"
            item = QListWidgetItem(item_text)
            item.setData(Qt.UserRole, alarm)
            item.setToolTip(
                f"–ú–∞—Ä–∫–∞: {alarm.get('brand')}\n"
                f"VIN: {alarm.get('vin')}\n"
                f"–î–æ–≥–æ–≤–æ—Ä: {alarm.get('contract')}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {alarm.get('message')}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {alarm.get('comment')}"
            )
            item.setForeground(Qt.red)
            item.setBackground(Qt.yellow)
            self.result_list.addItem(item)

    def clear_search(self):
        self.vin_input.clear()
        self.contract_input.clear()
        self.keyword_input.clear()
        self.result_list.clear()
        self.vin_input.setFocus()

    def highlight_item(self, item):
        item.setBackground(QColor("#eef"))

    def handle_right_click(self, item):
        if QApplication.mouseButtons() == Qt.RightButton:
            self.show_details_dialog(item)

    def show_details_dialog(self, item):
        alarm = item.data(Qt.UserRole)
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏")
        layout = QVBoxLayout()

        text_box = QTextEdit()
        text_box.setReadOnly(True)
        text_box.setFont(QFont("Courier", 10))
        text_box.setText(
            f"–ú–∞—Ä–∫–∞: {alarm.get('brand')}\n"
            f"VIN: {alarm.get('vin')}\n"
            f"–ì–æ—Å–Ω–æ–º–µ—Ä: {alarm.get('license')}\n"
            f"–î–æ–≥–æ–≤–æ—Ä: {alarm.get('contract')}\n"
            f"–õ–∏–∑–∏–Ω–≥–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å: {alarm.get('lessee')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {alarm.get('message')}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {alarm.get('comment')}\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {alarm.get('timestamp')}\n"
            f"–ó–∞–∫—Ä—ã—Ç–æ: {alarm.get('closed_at', '-')}"
        )
        layout.addWidget(text_box)

        buttons = QDialogButtonBox(QDialogButtonBox.Ok)
        buttons.accepted.connect(dialog.accept)
        layout.addWidget(buttons)

        dialog.setLayout(layout)
        dialog.exec_()
