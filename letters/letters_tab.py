import json
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QTextEdit,
    QListWidget, QPushButton, QMessageBox
)
from PyQt5.QtGui import QFont


class LettersTab(QWidget):
    def __init__(self):
        super().__init__()

        self.templates = self.load_templates()

        layout = QVBoxLayout()
        self.setStyleSheet("""
            QWidget {
                background-color: #f4f6f7;
                font-size: 13px;
                color: black;
            }
            QLabel {
                font-weight: bold;
                color: #2c3e50;
            }
            QLineEdit, QTextEdit {
                background-color: white;
                border: 1px solid black;
                border-radius: 4px;
                padding: 5px;
            }
            QListWidget {
                background-color: #fff;
                border: 1px solid #ccc;
            }
            QPushButton {
                padding: 8px 12px;
                border-radius: 5px;
                font-weight: bold;
            }
        """)

        # üîπ –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        self.fields = {}
        field_names = {
            "brand": "üöó –ú–∞—Ä–∫–∞ –¢–°",
            "vin": "üîë VIN",
            "license": "üìõ –ì–æ—Å–Ω–æ–º–µ—Ä",
            "contract": "üìÑ –î–æ–≥–æ–≤–æ—Ä",
            "message": "üóíÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏"
        }

        for key, label in field_names.items():
            hlayout = QHBoxLayout()
            lbl = QLabel(label + ":")
            line_edit = QLineEdit()
            self.fields[key] = line_edit
            hlayout.addWidget(lbl)
            hlayout.addWidget(line_edit)
            layout.addLayout(hlayout)

        # üîπ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        layout.addWidget(QLabel("üìã –®–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º:"))
        self.template_list = QListWidget()
        self.template_list.itemClicked.connect(self.apply_template)
        for t in self.templates:
            self.template_list.addItem(t["title"])
        layout.addWidget(self.template_list)

        # üîπ –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        layout.addWidget(QLabel("‚úâÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç:"))
        self.result_text = QTextEdit()
        self.result_text.setFont(QFont("Courier", 10))
        layout.addWidget(self.result_text)

        # üîπ –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generate_button = QPushButton("üì® –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ")
        self.generate_button.setStyleSheet("background-color: #4CAF50; color: white;")
        self.generate_button.clicked.connect(self.generate_message)
        layout.addWidget(self.generate_button)

        self.setLayout(layout)

    def load_templates(self):
        try:
            with open("letters/templates.json", "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º:\n{e}")
            return []

    def apply_template(self, item):
        index = self.template_list.row(item)
        self.result_text.clear()
        self.result_text.setPlainText(self.templates[index]["content"])

    def generate_message(self):
        raw_text = self.result_text.toPlainText()
        if not raw_text.strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –ø—É—Å—Ç.")
            return

        data = {k: f.text().strip() for k, f in self.fields.items()}
        if not any(data.values()):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ.")
            return

        try:
            result = raw_text.format(**data)
            self.result_text.setPlainText(result)
        except KeyError as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {e}")
